// 'Custom' defined schemas, to make sure fields are always available in the Gridsome Schema, and to remove any admin-specific fields

const ProductSchema = typeName => `type ${typeName}Product implements Node {
  id: ID
  archived: Boolean
  createdOn: Date
  description: String
  downloadUrl: String
  gender: Int
  height: Float
  htsCode: String
  isTaxable: Boolean
  isVendor: Boolean
  length: Float
  modifiedOn: Date
  name: String
  productChannel: String
  quantity: Int
  shortDescription: String
  slug: String
  stripeId: String
  type: Int
  unitOfDimensions: Int
  unitOfWeight: Int
  variantCount: Int
  weight: Float
  width: Float
  seo: ${typeName}Seo
  skus: [${typeName}Sku]
  images: [${typeName}Images]
  customMetadata: [${typeName}CustomProductMetadata]
  metadata: [${typeName}ProductMetadata]
  collections: [${typeName}Collection]
  attributes: [${typeName}ProductAttribute]
  related: [${typeName}Product]
}`

const SKUSchema = typeName => `type ${typeName}Sku implements Node {
  basePrice: Int
  height: Float
  id: ID
  length: Float
  purchaseLimit: Int
  salePrice: Int
  sku: String
  unitOfDimensions: Int
  unitOfWeight: Int
  url: String
  weight: Float
  width: Float
  image: Image
  product: ${typeName}Product
  attributes: [${typeName}SkuAttribute]
}`

const ImageSchema = typeName => `type ${typeName}Images {
  image: Image
}`

const SEOSchema = typeName => `type ${typeName}Seo {
  title: String
  description: String
}`

const ProductMetadata = typeName => `
type ${typeName}ProductMetadata {
  id: ID!
  createdOn: Date!
  modifiedOn: Date!
  productCategoryTag1: String
  productCategoryTag2: String
  productCategoryTag3: String
  productDominantColor1: String
  productDominantColor2: String
  productDominantColor3: String
  productDominantColor4: String
  productDominantColor5: String
  productHtsCode: String
}
type ${typeName}CustomProductMetadata {
  name: String
  value: String
  type: ${typeName}CustomProductMetadataType
}
enum ${typeName}CustomProductMetadataType {
  DATE_TIME
  MEDIA
  TEXT_EDITOR
  TEXT_INPUT
}`

const CollectionSchema = typeName => `type ${typeName}Collection implements Node {
  id: ID!
  archived: Boolean!
  createdOn: Date!
  isAutogenerated: Boolean!
  modifiedOn: Date!
  name: String!
  slug: String
  tags: [String]
  products: [${typeName}Product]
}`

const AttributeSchema = typeName => `
type ${typeName}ProductAttribute {
  key: String
  name: String
  values: [String]
}
type ${typeName}SkuAttribute {
  key: String
  name: String
  value: String
}
`

module.exports = typeName => [
  ProductSchema(typeName),
  SKUSchema(typeName),
  ImageSchema(typeName),
  SEOSchema(typeName),
  ProductMetadata(typeName),
  CollectionSchema(typeName),
  AttributeSchema(typeName)
]
